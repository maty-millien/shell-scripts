#!/usr/bin/env python3

import os
import subprocess
import sys
import argparse

# Plain ANSI color codes
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
BLUE = "\033[1;34m"
MAGENTA = "\033[1;35m"
CYAN = "\033[1;36m"
WHITE = "\033[1;37m"
BOLD = "\033[1m"
RESET = "\033[0m"


def strip_ansi(text):
    import re
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)


def run_git_command(cmd, description, show_output=True):
    """Run a git command and print its output with nice formatting"""
    print(f"{BOLD}→ {description}{RESET}")

    try:
        result = subprocess.run(cmd,
                               capture_output=True,
                               text=True,
                               check=True)

        if show_output and result.stdout.strip():
            relevant_lines = [line for line in result.stdout.strip().split('\n') if line.strip()]
            if relevant_lines:
                print(f"{BLUE}▼ Output{RESET}")
                for line in relevant_lines:
                    print(f"  {line}")
                print()

        return True, result.stdout

    except subprocess.CalledProcessError as e:
        print(f"{RED}✗ ERROR: Command failed{RESET}")
        if e.stderr:
            error_details = e.stderr.strip()
            if error_details:
                print(f"{RED}▼ Details{RESET}")
                for line in error_details.split('\n'):
                    print(f"  {line}")
        return False, e.stderr

    except Exception as e:
        print(f"{RED}✗ ERROR: Command failed with exception{RESET}")
        print(f"{RED}▼ Details{RESET}")
        print(f"  {str(e)}")
        return False, str(e)


def get_branch_status(remote, branch):
    """Get detailed branch status information"""
    try:
        # Get local commit
        local_commit = subprocess.run(
            ['git', 'rev-parse', branch],
            capture_output=True, text=True, check=True
        ).stdout.strip()[:7]  # First 7 chars of commit hash

        # Get remote commit
        remote_commit = subprocess.run(
            ['git', 'rev-parse', f'{remote}/{branch}'],
            capture_output=True, text=True, check=True
        ).stdout.strip()[:7]

        # Get ahead/behind count
        ahead_behind = subprocess.run(
            ['git', 'rev-list', '--left-right', '--count', f'{branch}...{remote}/{branch}'],
            capture_output=True, text=True, check=True
        ).stdout.strip().split()

        ahead = int(ahead_behind[0])
        behind = int(ahead_behind[1])

        status = ""
        status_color = GREEN

        if ahead > 0 and behind > 0:
            status = f"diverged (ahead {ahead}, behind {behind})"
            status_color = YELLOW
        elif ahead > 0:
            status = f"ahead by {ahead} commit{'s' if ahead > 1 else ''}"
            status_color = CYAN
        elif behind > 0:
            status = f"behind by {behind} commit{'s' if behind > 1 else ''}"
            status_color = YELLOW
        else:
            status = "up to date"
            status_color = GREEN

        return {
            'local_commit': local_commit,
            'remote_commit': remote_commit,
            'ahead': ahead,
            'behind': behind,
            'status': status,
            'status_color': status_color
        }
    except Exception:
        return None


def show_changes_summary(pull_output):
    """Parse pull output to show a summary of changes"""
    if not pull_output:
        return

    # Look for file changes in pull output
    files_changed = []
    summary_lines = []
    insertion_count = 0
    deletion_count = 0

    in_summary_section = False
    for line in pull_output.split('\n'):
        line = line.strip()

        # Check for file changes
        if ' | ' in line and ('changed' in line or 'insertion' in line or 'deletion' in line):
            summary_lines.append(line)

        # Extract file names
        if line.startswith(' '):
            parts = line.strip().split('|', 1)
            if len(parts) > 0:
                filename = parts[0].strip()
                if filename:
                    files_changed.append(filename)

    if summary_lines or files_changed:
        print(f"{CYAN}▼ Changes summary{RESET}")

        if summary_lines:
            for line in summary_lines:
                print(f"  {line}")

        if files_changed:
            print(f"\n  {BOLD}Modified files:{RESET}")
            for file in files_changed:
                print(f"  - {file}")
        print()


def main():
    parser = argparse.ArgumentParser(description='Git fetch and pull helper')
    parser.add_argument('-r', '--remote', default='origin',
                       help='Git remote name (default: origin)')
    parser.add_argument('-b', '--branch',
                       help='Git branch name (default: current branch)')
    parser.add_argument('-f', '--fetch-only', action='store_true',
                       help='Only fetch without pull')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Quiet mode (less output)')
    parser.add_argument('--no-fetch', action='store_true',
                       help='Skip fetch and only pull')
    parser.add_argument('-s', '--status', action='store_true',
                       help='Show detailed branch status')
    args = parser.parse_args()

    # Check if current directory is a git repository
    if not os.path.exists('.git'):
        print(f"{RED}ERROR:{RESET} Not a git repository")
        sys.exit(1)

    # Get current branch if none specified
    if not args.branch:
        try:
            current_branch = subprocess.run(
                ['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
                capture_output=True, text=True, check=True
            ).stdout.strip()
            args.branch = current_branch
        except subprocess.CalledProcessError:
            print(f"{RED}ERROR:{RESET} Unable to determine current branch")
            sys.exit(1)

    # Print a header with repo status
    try:
        repo_name = os.path.basename(os.path.abspath('.'))
        print(f"{CYAN}Branch: {GREEN}{args.branch}{CYAN} | Remote: {GREEN}{args.remote}{RESET}")

        # Show current branch status if requested
        if args.status:
            status = get_branch_status(args.remote, args.branch)
            if status:
                print(f"{CYAN}Status: {status['status_color']}{status['status']}{RESET}")
                print(f"{CYAN}Local: {WHITE}{status['local_commit']}{CYAN} | Remote: {WHITE}{status['remote_commit']}{RESET}")
        print()
    except Exception:
        # Continue even if status information fails
        pass

    # Fetch updates
    if not args.no_fetch:
        fetch_success, fetch_output = run_git_command(
            ['git', 'fetch', args.remote, args.branch],
            f"Fetching from {args.remote}/{args.branch}",
            show_output=not args.quiet
        )

        if not fetch_success:
            print(f"{RED}Fetch failed!{RESET}")
            sys.exit(1)

    # Pull updates (if not fetch-only)
    if not args.fetch_only:
        pull_cmd = ['git', 'pull', args.remote, args.branch]
        if args.quiet:
            pull_cmd.append('--quiet')

        pull_success, pull_output = run_git_command(
            pull_cmd,
            f"Pulling from {args.remote}/{args.branch}",
            show_output=not args.quiet
        )

        if pull_success:
            print(f"{GREEN}✓ Pull successful{RESET}")

            # Show a summary of what changed
            if not args.quiet:
                show_changes_summary(pull_output)

            # Show final branch status if not quiet mode
            if not args.quiet:
                try:
                    status = get_branch_status(args.remote, args.branch)
                    if status:
                        print(f"{CYAN}Current status: {status['status_color']}{status['status']}{RESET}")
                except Exception:
                    pass
        else:
            print(f"{RED}✗ Pull failed{RESET}")
            sys.exit(1)


if __name__ == "__main__":
    main()
