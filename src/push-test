#!/usr/bin/env python3

import os
import sys
import subprocess
import requests
import json
import time

GREEN = '\033[1;32m'
BLUE = '\033[1;34m'
RED = '\033[1;31m'
YELLOW = '\033[1;33m'
NC = '\033[0m'

def is_git_repository():
    try:
        subprocess.check_output(['git', 'rev-parse', '--git-dir'], stderr=subprocess.STDOUT)
        return True
    except subprocess.CalledProcessError:
        return False

def get_changed_files(filter_type):
    result = subprocess.check_output(['git', 'diff', '--cached', '--name-only', f'--diff-filter={filter_type}'])
    return ['\t' + line for line in result.decode().splitlines()]

def get_changes_summary():
    result = subprocess.check_output(['git', 'diff', 'HEAD'])
    return '\n'.join(['\t' + line for line in result.decode().splitlines()])

def request_ai(prompt, model="llama3.2:1b", host="http://127.0.0.1:11434"):
    url = f"{host}/v1/completions"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "keep_alive": -1,
        "prompt": prompt,
        "stream": True,
    }

    with requests.post(url, json=data, headers=headers, stream=True) as response:
        if response.status_code == 200:
            for line in response.iter_lines():
                if line:
                    json_response = json.loads(line.decode('utf-8').split('data: ')[1])
                    if 'choices' in json_response and len(json_response['choices']) > 0:
                        text = json_response['choices'][0]['text']
                        print(text, end='', flush=True)
                        if json_response['choices'][0]['finish_reason'] == 'stop':
                            print()
                            break
            return None
        else:
            print(f"Erreur {response.status_code}: {response.text}")
            return None

def generate_commit_message(message=None):
    added_files = get_changed_files('A')
    modified_files = get_changed_files('M')
    deleted_files = get_changed_files('D')
    renamed_files = get_changed_files('R')

    changes_summary = get_changes_summary()

    prompt_path = '/home/maty/Scripts/src/prompt.txt'
    if not os.path.isfile(prompt_path):
        print(f"{RED}❌ Error: prompt.txt file not found.{NC}")
        sys.exit(1)
    with open(prompt_path, 'r') as f:
        static_prompt = f.read()

    prompt = f"{changes_summary}\n\n{static_prompt}"

    print(f"{BLUE}🤖 Asking AI to summarize changes...{NC}")
    ollama_summary = request_ai(prompt)

    added_count = len(added_files)
    modified_count = len(modified_files)
    deleted_count = len(deleted_files)
    renamed_count = len(renamed_files)

    if message:
        commit_message = message
    else:
        commit_message = f"{ollama_summary}\n\nDetailed changes:"
        if added_count > 0:
            commit_message += f"\n\nAdded ({added_count}):\n" + '\n'.join(added_files)
        if modified_count > 0:
            commit_message += f"\n\nModified ({modified_count}):\n" + '\n'.join(modified_files)
        if deleted_count > 0:
            commit_message += f"\n\nDeleted ({deleted_count}):\n" + '\n'.join(deleted_files)
        if renamed_count > 0:
            commit_message += f"\n\nRenamed ({renamed_count}):\n" + '\n'.join(renamed_files)

    print(f"{YELLOW}📋 Commit Message:{NC}")
    print(commit_message)

    response = input(f"{YELLOW}Accept? (Y/n):{NC} ")
    if response.lower() not in ('y', 'yes', ''):
        print(f"{BLUE}🔄 Regenerating commit message...{NC}")
        generate_commit_message()

    with open('commit_msg.txt', 'w') as f:
        f.write(commit_message)

    # subprocess.run(['git', 'commit', '-F', 'commit_msg.txt'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    os.remove('commit_msg.txt')

    current_branch = subprocess.check_output(['git', 'branch', '--show-current']).decode().strip()
    print(f"{BLUE}🚀 Pushing to {YELLOW}{current_branch}{BLUE}...{NC}")
    # push_result = subprocess.run(['git', 'push', 'origin', current_branch], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if push_result.returncode == 0:
        print(f"{GREEN}✅ Successfully pushed to {current_branch}{NC}")
    else:
        print(f"{RED}❌ Failed to push to {current_branch}{NC}")
        print(f"{YELLOW}💡 Try running: git push origin {current_branch} manually{NC}")

def main():
    if not is_git_repository():
        print(f"{RED}❌ Error: Not a git repository{NC}")
        print(f"{YELLOW}💡 Run this command inside a git repository{NC}")
        sys.exit(1)

    subprocess.run(['git', 'add', '.'])

    status = subprocess.check_output(['git', 'status', '--porcelain']).decode().strip()
    if status:
        message = sys.argv[1] if len(sys.argv) > 1 else None
        generate_commit_message(message)
    else:
        print(f"{RED}❌ No changes to commit{NC}")
        print(f"{YELLOW}💡 Make some changes first{NC}")
        sys.exit(1)

if __name__ == "__main__":
    main()
