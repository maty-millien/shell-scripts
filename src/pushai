#!/usr/bin/env python3

import os
import sys
import subprocess
import json
import time
from mistralai import Mistral

def rgb_to_ansi(r, g, b):
    return f"\033[38;2;{r};{g};{b}m"

def gradient_text(text, start_rgb, end_rgb):
    result = ""
    start_r, start_g, start_b = start_rgb
    end_r, end_g, end_b = end_rgb
    
    for i, char in enumerate(text):
        # Calculate the color for the current character
        progress = i / (len(text) - 1) if len(text) > 1 else 0
        r = int(start_r + (end_r - start_r) * progress)
        g = int(start_g + (end_g - start_g) * progress)
        b = int(start_b + (end_b - start_b) * progress)
        
        result += f"{rgb_to_ansi(r, g, b)}{char}"
    
    return result + "\033[0m"

# Définition des dégradés avec des couleurs plus vives
def error_gradient(text):
    # Rouge vif vers magenta vif
    return gradient_text(text, (255, 40, 40), (255, 40, 255))

def info_gradient(text):
    # Cyan vif vers bleu vif
    return gradient_text(text, (40, 255, 255), (40, 40, 255))

def success_gradient(text):
    # Vert lime vers vert émeraude
    return gradient_text(text, (40, 255, 40), (40, 255, 180))

def warning_gradient(text):
    # Jaune vif vers orange vif
    return gradient_text(text, (255, 255, 40), (255, 180, 40))

AI_MODEL = "mistral-large-latest"

def is_git_repository():
    try:
        subprocess.check_output(['git', 'rev-parse', '--git-dir'], stderr=subprocess.STDOUT)
        return True
    except subprocess.CalledProcessError:
        return False

def get_changed_files(filter_type):
    result = subprocess.check_output(['git', 'diff', '--cached', '--name-only', f'--diff-filter={filter_type}'])
    return ['\t' + line for line in result.decode().splitlines()]

def get_changes_summary():
    result = subprocess.check_output(['git', 'diff', 'HEAD'])
    return '\n'.join(['\t' + line for line in result.decode().splitlines()])

def request_ai(prompt, model=AI_MODEL):
    system_prompt_path = '/home/maty/Scripts/src/system_prompt.txt'
    if not os.path.isfile(system_prompt_path):
        print(error_gradient("❌ Error: system_prompt.txt file not found."))
        sys.exit(1)
    with open(system_prompt_path, 'r') as f:
        system_prompt = f.read()

    api_key = os.environ.get('MISTRAL_API_KEY')
    client = Mistral(api_key)

    try:
        stream = client.chat.complete(
            model=model,
            messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
            ]
        )
        return stream.choices[0].message.content
    except Exception as e:
        print(f"Error: {str(e)}")
        return None

def generate_commit_message(message=None):
    added_files = get_changed_files('A')
    modified_files = get_changed_files('M')
    deleted_files = get_changed_files('D')
    renamed_files = get_changed_files('R')

    changes_summary = get_changes_summary()

    print(info_gradient("🤖 Asking AI to summarize changes..."))
    ai_summary = request_ai(changes_summary)

    added_count = len(added_files)
    modified_count = len(modified_files)
    deleted_count = len(deleted_files)
    renamed_count = len(renamed_files)

    if message:
        commit_message = message
    else:
        commit_message = f"{ai_summary}\n\nDetailed changes:"
        if added_count > 0:
            commit_message += f"\n\nAdded ({added_count}):\n" + '\n'.join(added_files)
        if modified_count > 0:
            commit_message += f"\n\nModified ({modified_count}):\n" + '\n'.join(modified_files)
        if deleted_count > 0:
            commit_message += f"\n\nDeleted ({deleted_count}):\n" + '\n'.join(deleted_files)
        if renamed_count > 0:
            commit_message += f"\n\nRenamed ({renamed_count}):\n" + '\n'.join(renamed_files)

    print(commit_message)
    
    response = input(warning_gradient("Accept? (Y/n): "))
    if response.lower() not in ('y', 'yes', ''):
        print(info_gradient("🔄 Regenerating commit message..."))
        generate_commit_message()

    with open('commit_msg.txt', 'w') as f:
        f.write(commit_message)

    subprocess.run(['git', 'commit', '-F', 'commit_msg.txt'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    os.remove('commit_msg.txt')

    current_branch = subprocess.check_output(['git', 'branch', '--show-current']).decode().strip()
    print(info_gradient(f"🚀 Pushing to {current_branch}..."))
    push_result = subprocess.run(['git', 'push', 'origin', current_branch], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if push_result.returncode == 0:
        print(success_gradient(f"✅ Successfully pushed to {current_branch}"))
    else:
        print(error_gradient(f"❌ Failed to push to {current_branch}"))
        print(warning_gradient(f"💡 Try running: git push origin {current_branch} manually"))

def main():
    if not is_git_repository():
        print(error_gradient("❌ Not a git repository"))
        sys.exit(1)

    subprocess.run(['git', 'add', '.'])

    status = subprocess.check_output(['git', 'status', '--porcelain']).decode().strip()
    if status:
        message = sys.argv[1] if len(sys.argv) > 1 else None
        generate_commit_message(message)
    else:
        print(error_gradient("❌ No changes to commit"))
        sys.exit(1)

if __name__ == "__main__":
    main()
