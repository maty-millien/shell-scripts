#!/usr/bin/env python3

import os
import sys
import subprocess
import json
import time
from datetime import datetime
import argparse
from pathlib import Path

def rgb_to_ansi(r, g, b, bold=True):
    bold_code = "1;" if bold else ""
    return f"\033[{bold_code}38;2;{r};{g};{b}m"

def gradient_text(text, start_rgb, end_rgb, bold=True):
    result = ""
    start_r, start_g, start_b = start_rgb
    end_r, end_g, end_b = end_rgb
    
    for i, char in enumerate(text):
        progress = i / (len(text) - 1) if len(text) > 1 else 0
        r = int(start_r + (end_r - start_r) * progress)
        g = int(start_g + (end_g - start_g) * progress)
        b = int(start_b + (end_b - start_b) * progress)
        
        result += f"{rgb_to_ansi(r, g, b, bold)}{char}"
    
    return result + "\033[0m"

def error_gradient(text):
    return gradient_text(text, (255, 40, 40), (255, 40, 255))

def info_gradient(text):
    return gradient_text(text, (40, 255, 255), (40, 40, 255))

def success_gradient(text):
    return gradient_text(text, (40, 255, 40), (40, 255, 180))

def warning_gradient(text):
    return gradient_text(text, (255, 255, 40), (255, 180, 40))

def white_gradient(text):
    return gradient_text(text, (250, 250, 250), (225, 234, 238), bold=False)

def purple_gradient(text):
    return gradient_text(text, (147, 51, 234), (224, 57, 247))

DOCKER_SOCKET_PATH = '/var/run/docker.sock'
EXPORT_FILE = "coding-style-reports.log"
IMAGE_LAST_PULL_FILE = "/tmp/coding_style_checker_last_pull"
BANNED_EXTENSIONS = ['md']

def strip_ansi(text):
    import re
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)

def display_results():
    last_file = ""
    sum_errors = 0
    max_width = 0
    
    if not os.path.exists(EXPORT_FILE):
        return
    
    with open(EXPORT_FILE, 'r') as f:
        for line in f:
            current_file = line.split(':')[0]
            file_extension = current_file.split('.')[-1]
            
            if file_extension in BANNED_EXTENSIONS:
                continue
            
            path_and_line = ':'.join(line.split(':')[:2]).replace('./', '')
            message = ':'.join(line.split(':')[2:]).strip()
            error_code, description = message.split(':', 1)
            formatted_message = f"{path_and_line:<30} {error_code.strip()} ‚Üí {description.strip()}"
            max_width = max(max_width, len(strip_ansi(formatted_message)))
    
    box_width = max_width + 2
    
    with open(EXPORT_FILE, 'r') as f:
        for line in f:
            current_file = line.split(':')[0]
            file_extension = current_file.split('.')[-1]
            
            if file_extension in BANNED_EXTENSIONS:
                continue
                
            error_type = line.split(':')[2].split('-')[0].strip()
            
            color_func = {
                'MINOR': warning_gradient,
                'MAJOR': error_gradient,
                'INFO': info_gradient
            }.get(error_type, white_gradient)
            
            current_file = current_file.replace('./', '')
            
            if os.path.exists('.gitignore'):
                with open('.gitignore', 'r') as gitignore:
                    patterns = gitignore.read().splitlines()
                    if current_file in patterns or f"*.{file_extension}" in patterns:
                        continue
            
            if current_file != last_file:
                if last_file:
                    print("‚ï∞" + "‚îÄ" * box_width + "‚ïØ")
                print("\n‚ï≠" + "‚îÄ" * box_width + "‚ïÆ")
                colored_filename = purple_gradient(current_file)
                padding = box_width - len(strip_ansi(f" üìÑ {current_file} "))
                print(f"‚îÇ üìÑ {colored_filename}{' ' * padding}‚îÇ")
                print("‚îú" + "‚îÄ" * box_width + "‚î§")
                last_file = current_file
            
            path_and_line = ':'.join(line.split(':')[:2]).replace('./', '')
            message = ':'.join(line.split(':')[2:]).strip()
            error_code, description = message.split(':', 1)
            formatted_message = f"{error_code.strip()} ‚Üí {description.strip()}"
            
            colored_msg = color_func(formatted_message)
            content = f"{path_and_line:<30} {formatted_message}"
            padding = box_width - len(strip_ansi(content)) - 1
            print(f"‚îÇ {path_and_line:<30} {colored_msg}{' ' * padding}‚îÇ")
            
            sum_errors += 1
    
    if sum_errors == 0:
        print(f"‚úÖ {success_gradient('No coding style issues found')}")
    else:
        print("‚ï∞" + "‚îÄ" * box_width + "‚ïØ")

def should_pull_image(force_pull):
    if force_pull:
        return True
        
    if os.path.exists(IMAGE_LAST_PULL_FILE):
        with open(IMAGE_LAST_PULL_FILE, 'r') as f:
            last_pull_time = int(f.read().strip())
            time_diff = int(time.time()) - last_pull_time
            return time_diff >= 86400
    return True

def main():
    parser = argparse.ArgumentParser(description='Coding style checker')
    parser.add_argument('-f', action='store_true', help='Force pull latest image')
    args = parser.parse_args()
    
    delivery_dir = os.getcwd()
    reports_dir = os.getcwd()
    force_pull = args.f
    has_socket_access = os.access(DOCKER_SOCKET_PATH, os.R_OK)
    base_exec_cmd = ['docker']
    
    if os.path.exists(EXPORT_FILE):
        os.remove(EXPORT_FILE)
    
    if not has_socket_access:
        print(f"{warning_gradient('WARNING: Socket access is denied')}")
        print(f"To fix this we will add the current user to docker group with : sudo usermod -a -G docker {os.getenv('USER')}")
        response = input("Do you want to proceed? (yes/no) ").lower()
        
        if response in ['yes', 'y']:
            subprocess.run(['sudo', 'usermod', '-a', '-G', 'docker', os.getenv('USER')])
            print(f"{warning_gradient('You must reboot your computer for the changes to take effect')}")
        base_exec_cmd = ['sudo', 'docker']
    
    if should_pull_image(force_pull):
        print(f"üîë {warning_gradient('Fetching token...')}")
        try:
            import requests
            token_resp = requests.get("https://ghcr.io/token?service=ghcr.io&scope=repository:epitech/coding-style-checker:pull")
            token = token_resp.json()['token']
            
            headers = {'Authorization': f'Bearer {token}'}
            status = requests.head("https://ghcr.io/v2/epitech/coding-style-checker/manifests/latest", headers=headers)
            
            if status.ok:
                print(f"üöö {info_gradient('Pulling latest image...')}")
                subprocess.run(base_exec_cmd + ['pull', 'ghcr.io/epitech/coding-style-checker:latest'], 
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(base_exec_cmd + ['image', 'prune', '-f'],
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                
                with open(IMAGE_LAST_PULL_FILE, 'w') as f:
                    f.write(str(int(time.time())))
        except Exception:
            print(f"‚ùå {error_gradient('Failed to pull latest image')}")
    
    print(f"üïí {purple_gradient('Using cached image...')}")
    print(f"üîç {info_gradient('Checking coding style...')}")
    
    subprocess.run(base_exec_cmd + [
        'run', '--platform', 'linux/amd64', '--rm', '-i',
        '-v', f"{delivery_dir}:/mnt/delivery",
        '-v', f"{reports_dir}:/mnt/reports",
        'ghcr.io/epitech/coding-style-checker:latest',
        '/mnt/delivery', '/mnt/reports'
    ])
    
    display_results()
    
    if os.path.exists(EXPORT_FILE):
        os.remove(EXPORT_FILE)

if __name__ == "__main__":
    main()
