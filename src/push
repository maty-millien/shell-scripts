#!/bin/bash
#
# This script automates the process of staging, committing, and pushing changes to a git repository.
# It includes color-coded messages for better readability and user guidance.
#
# Usage:
#   push [commit_message]
#
# Parameters:
#   commit_message (optional) - A custom commit message. If not provided, a default message will be used.
#
# Features:
# - Checks if the current directory is a git repository.
# - Stages all changes.
# - Generates a commit message listing added, modified, deleted, and renamed files.
# - Commits the changes with the generated or provided commit message.
# - Pushes the commit to the current branch.
#

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if current directory is a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Error: Not a git repository${NC}"
    echo -e "${YELLOW}üí° Run this command inside a git repository${NC}"
    exit 1
fi

# Stage all changes
echo -e "${BLUE}üì¶ Staging changes...${NC}"
git add .

generate_commit_message() {
    # Get modified files without emojis, just indentation
    ADDED_FILES=$(git diff --cached --name-only --diff-filter=A | sed 's/^/\t/g')
    MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M | sed 's/^/\t/g')
    DELETED_FILES=$(git diff --cached --name-only --diff-filter=D | sed 's/^/\t/g')
    RENAMED_FILES=$(git diff --cached --name-only --diff-filter=R | sed 's/^/\t/g')

    # Count the number of changes
    ADDED_COUNT=$(echo "$ADDED_FILES" | grep -c '^' || true)
    MODIFIED_COUNT=$(echo "$MODIFIED_FILES" | grep -c '^' || true)
    DELETED_COUNT=$(echo "$DELETED_FILES" | grep -c '^' || true)
    RENAMED_COUNT=$(echo "$RENAMED_FILES" | grep -c '^' || true)
    TOTAL_CHANGES=$((ADDED_COUNT + MODIFIED_COUNT + DELETED_COUNT + RENAMED_COUNT))

    # Build commit message with custom title if provided
    if [ -n "$1" ]; then
        echo "$1 ($TOTAL_CHANGES changes)" > commit_msg.txt
    else
        echo "Changes: ($TOTAL_CHANGES files)" > commit_msg.txt
    fi
    
    # List modified files by category without emojis
    [[ ! -z "$ADDED_FILES" ]] && echo -e "\nAdded ($ADDED_COUNT):\n$ADDED_FILES" >> commit_msg.txt
    [[ ! -z "$MODIFIED_FILES" ]] && echo -e "\nModified ($MODIFIED_COUNT):\n$MODIFIED_FILES" >> commit_msg.txt
    [[ ! -z "$DELETED_FILES" ]] && echo -e "\nDeleted ($DELETED_COUNT):\n$DELETED_FILES" >> commit_msg.txt
    [[ ! -z "$RENAMED_FILES" ]] && echo -e "\nRenamed ($RENAMED_COUNT):\n$RENAMED_FILES" >> commit_msg.txt

    # Show commit message in terminal
    echo -e "${YELLOW}üìã Commit Message:${NC}"
    cat commit_msg.txt

    # Use generated message for commit
    git commit -F commit_msg.txt > /dev/null 2>&1
    rm commit_msg.txt

    # Get current branch name
    CURRENT_BRANCH=$(git branch --show-current)
    
    echo -e "${BLUE}üöÄ Pushing to ${YELLOW}$CURRENT_BRANCH${BLUE}...${NC}"
    
    # Push to the current branch
    if git push origin "$CURRENT_BRANCH" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Successfully pushed to $CURRENT_BRANCH${NC}"
    else
        echo -e "${RED}‚ùå Failed to push to $CURRENT_BRANCH${NC}"
        echo -e "${YELLOW}üí° Try running: git push origin $CURRENT_BRANCH manually${NC}"
    fi
}

# Check if there are any changes
if git status --porcelain | grep -q '^.*$'; then
    generate_commit_message "$1"
else
    echo -e "${RED}‚ùå No changes to commit${NC}"
    echo -e "${YELLOW}üí° Make some changes first${NC}"
    exit 1
fi