#!/usr/bin/env python3

import subprocess
import sys
import os

GREEN = '\033[1;32m'
BLUE = '\033[1;34m'
RED = '\033[1;31m'
YELLOW = '\033[1;33m'
NC = '\033[0m'

def is_git_repository():
    try:
        subprocess.run(['git', 'rev-parse', '--git-dir'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

def generate_commit_message(custom_message=None):
    added_files = subprocess.getoutput("git diff --cached --name-only --diff-filter=A")
    modified_files = subprocess.getoutput("git diff --cached --name-only --diff-filter=M")
    deleted_files = subprocess.getoutput("git diff --cached --name-only --diff-filter=D")
    renamed_files = subprocess.getoutput("git diff --cached --name-only --diff-filter=R")

    added_list = added_files.splitlines()
    modified_list = modified_files.splitlines()
    deleted_list = deleted_files.splitlines()
    renamed_list = renamed_files.splitlines()

    added_count = len(added_list) if added_list != [''] else 0
    modified_count = len(modified_list) if modified_list != [''] else 0
    deleted_count = len(deleted_list) if deleted_list != [''] else 0
    renamed_count = len(renamed_list) if renamed_list != [''] else 0
    total_changes = added_count + modified_count + deleted_count + renamed_count

    if custom_message:
        commit_message = custom_message
    else:
        if total_changes == 1:
            if added_count == 1:
                commit_message = f"Added {added_list[0]}"
            elif modified_count == 1:
                commit_message = f"Modified {modified_list[0]}"
            elif deleted_count == 1:
                commit_message = f"Deleted {deleted_list[0]}"
            elif renamed_count ==1:
                commit_message = f"Renamed {renamed_list[0]}"
            else:
                commit_message = "Updated files"
        else:
            commit_message = f"{total_changes} changes:"

    if total_changes > 1 or custom_message:
        if added_count > 0:
            commit_message += f"\n\nAdded ({added_count}):\n" + "\n".join(f"\t{file}" for file in added_list)
        if modified_count > 0:
            commit_message += f"\n\nModified ({modified_count}):\n" + "\n".join(f"\t{file}" for file in modified_list)
        if deleted_count > 0:
            commit_message += f"\n\nDeleted ({deleted_count}):\n" + "\n".join(f"\t{file}" for file in deleted_list)
        if renamed_count > 0:
            commit_message += f"\n\nRenamed ({renamed_count}):\n" + "\n".join(f"\t{file}" for file in renamed_list)

    print(f"{YELLOW}📋 Commit Message:{NC}")
    print(commit_message)

    with open('commit_msg.txt', 'w') as f:
        f.write(commit_message)

    subprocess.run(['git', 'commit', '-F', 'commit_msg.txt'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    os.remove('commit_msg.txt')

    current_branch = subprocess.getoutput('git branch --show-current')

    print(f"{BLUE}🚀 Pushing to {YELLOW}{current_branch}{BLUE}...{NC}")

    try:
        subprocess.run(['git', 'push', 'origin', current_branch], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(f"{GREEN}✅ Successfully pushed to {current_branch}{NC}")
    except subprocess.CalledProcessError:
        print(f"{RED}❌ Failed to push to {current_branch}{NC}")
        print(f"{YELLOW}💡 Try running: git push origin {current_branch} manually{NC}")

def main():
    if not is_git_repository():
        print(f"{RED}❌ Error: Not a git repository{NC}")
        print(f"{YELLOW}💡 Run this command inside a git repository{NC}")
        sys.exit(1)
    print(f"{BLUE}📦 Staging changes...{NC}")
    subprocess.run(['git', 'add', '.'])

    status_output = subprocess.getoutput('git status --porcelain')
    if status_output.strip() != '':
        custom_message = sys.argv[1] if len(sys.argv) > 1 else None
        generate_commit_message(custom_message)
    else:
        print(f"{RED}❌ No changes to commit{NC}")
        # print(f"{YELLOW}💡 Make some changes first{NC}")
        sys.exit(1)

if __name__ == "__main__":
    main()
