#!/usr/bin/env python3

import argparse
import os
import sys
from pathlib import Path

# Plain ANSI color codes
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
BLUE = "\033[1;34m"
MAGENTA = "\033[1;35m"
CYAN = "\033[1;36m"
RED = "\033[1;31m"
RESET = "\033[0m"


def colored_text(text, color):
    """Apply a plain color to text"""
    return f"{color}{text}{RESET}"


def success_text(text):
    return colored_text(text, GREEN)


def info_text(text):
    return colored_text(text, CYAN)


def failure_text(text):
    return colored_text(text, RED)


CLEANUP_PATTERNS = [
    "*.o",
    "*.a",
    "*.gcno",
    "*.gcda",
    "*.gcov",
    "vgcore.*",
    "*.out",
    "*~",
    "*.swp",
    "*.swo",
]


def clean_directory(directory, force=False):
    cleaned_files = 0
    directory_path = Path(directory)

    for pattern in CLEANUP_PATTERNS:
        for file_path in directory_path.rglob(pattern):
            if file_path.is_file():
                try:
                    file_path.unlink()
                    print(f"🗑️  {info_text('Removed:')} {file_path}")
                    cleaned_files += 1
                except PermissionError:
                    if force:
                        file_path.chmod(0o777)
                        file_path.unlink()
                        print(f"🗑️  {info_text('Force removed:')} {file_path}")
                        cleaned_files += 1
                    else:
                        print(f"❌ {failure_text('Permission denied:')} {file_path}")

    return cleaned_files


def main():
    parser = argparse.ArgumentParser(description="Clean C programming temporary files")
    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        help="Force remove files (change permissions if needed)",
    )
    parser.add_argument(
        "-p", "--path", default=".", help="Path to clean (default: current directory)"
    )
    args = parser.parse_args()

    print(f"🧹 {info_text('Cleaning temporary files...')}")

    cleaned = clean_directory(args.path, args.force)

    if cleaned > 0:
        s = "s" if cleaned > 1 else ""
        print(f"\n✨ {success_text(f'Cleaned {cleaned} file{s}!')}")
    else:
        print(f"\n✨ {success_text('Directory already clean!')}")


if __name__ == "__main__":
    main()
